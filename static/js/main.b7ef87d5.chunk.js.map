{"version":3,"sources":["hooks/useTodayWeather.js","hooks/useAllWeather.js","components/SearchCity.js","hooks/useCityState.js","components/RenderWeather.jsx","components/Location.jsx","components/DateTime.jsx","components/WeatherCart.jsx","components/AllWeather.js","components/App.js","index.js"],"names":["apiKey","url","pog","searchTodayWeather","setWeather","position","lang","city","console","log","status","Math","round","coords","latitude","longitude","axios","get","then","response","temp","data","main","minTemp","maxTemp","tempFeels","feels_like","humidity","windSpeed","wind","speed","description","weather","name","country","sys","searchAllWeather","setLongWeather","allWeather","min","max","i","list","forEach","el","Number","substr","SearchCity","useState","setCity","changeCity","e","target","value","resetCity","useCityState","useTodayWeather","useAllWeather","className","onSubmit","preventDefault","onChange","type","placeholder","RenderWeather","Location","DateTime","date","Date","startTime","hours","getHours","getMinutes","sec","getSeconds","time","setTime","day","getDay","editTime","num","String","useEffect","setTimeout","toLocaleDateString","WeatherCart","nameDay","alt","floor","ceil","AllWeather","numDay","App","setLang","longWeather","undefined","navigator","geolocation","getCurrentPosition","alert","style","backgroundColor","href","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7ef87d5.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default () => {\r\n    const apiKey = \"257ac7fe862376912a604e35a0d1975b\";\r\n    let url = \"https://api.openweathermap.org/data/2.5/weather?\";\r\n\r\n    let pog = {};\r\n    \r\n    return{\r\n        searchTodayWeather: (setWeather, position, lang, city)=>{\r\n            console.log(position);\r\n            if(position.status === ''){\r\n                url+='q=';\r\n                url += city + '&units=metric&appid=' + apiKey + '&lang=' + lang;\r\n            }else{\r\n                url += \"lat=\" + (Math.round(position.coords.latitude*1000)/1000) + \"&lon=\" + (Math.round(position.coords.longitude*1000)/1000); \r\n                url += \"&units=metric&appid=\" + apiKey + '&lang=' + lang;\r\n            }\r\n        \r\n            axios.get(url).then(response => {\r\n                pog = {\r\n                    temp: Math.round(response.data.main.temp),\r\n                    minTemp: response.data.main[\"temp_min\"],\r\n                    maxTemp: response.data.main[\"temp_max\"],\r\n                    tempFeels: Math.round(response.data.main.feels_like),\r\n                    humidity: response.data.main.humidity,\r\n                    windSpeed: response.data.wind.speed,\r\n                    description: response.data.weather[0].description,\r\n                    status: response.data.weather[0].main,\r\n                    city: response.data.name,\r\n                    country: response.data.sys.country\r\n                }\r\n                setWeather(pog);\r\n            });\r\n        }\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport default () => {\r\n    const apiKey = \"257ac7fe862376912a604e35a0d1975b\";\r\n    let url = \"https://api.openweathermap.org/data/2.5/forecast?\";\r\n    \r\n    return{\r\n        searchAllWeather: (setLongWeather, position, lang, city)=>{\r\n            if(position.status === ''){\r\n                url +=\"q=\";\r\n                url += city + '&units=metric&appid=' + apiKey + '&lang=' + lang;\r\n            }else{\r\n                url+= \"lat=\" + (Math.round(position.coords.latitude * 1000) / 1000) + \"&lon=\" + (Math.round(position.coords.longitude * 1000) / 1000);\r\n                url+= '&units=metric&appid=' + apiKey + '&lang=' + lang;\r\n            }\r\n\r\n            axios.get(url).then(response => {\r\n                let allWeather = [];\r\n                let min = 100;\r\n                let max = -100;\r\n                let i = 0;\r\n                response.data.list.forEach(el => {\r\n                    if (min > el.main.temp) {\r\n                        min = Number(el.main.temp);\r\n                    }\r\n                    if (max < el.main.temp) {\r\n                        max = Number(el.main.temp);\r\n                    }\r\n                    allWeather[i] = {\r\n                        min: min,\r\n                        max: max,\r\n                    };\r\n                    if (el[\"dt_txt\"].substr(11, 8) === \"00:00:00\") {\r\n                        i++;\r\n                        min = 100;\r\n                        max = -100;\r\n                        allWeather[i] = {\r\n                            min: min,\r\n                            max: max\r\n                        }\r\n                    }\r\n                });\r\n                setLongWeather(allWeather);\r\n            });\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport useCityState from '../hooks/useCityState';\r\nimport useTodayWeather from '../hooks/useTodayWeather';\r\nimport useAllWeather from '../hooks/useAllWeather';\r\n\r\nconst SearchCity = ({lang, setWeather, setLongWeather}) => {\r\n    const {city, changeCity, resetCity} = useCityState('');\r\n    const {searchTodayWeather} = useTodayWeather();\r\n    const {searchAllWeather} = useAllWeather();\r\n\r\n    const search = (e) => {\r\n        e.preventDefault();\r\n        searchTodayWeather(setWeather, {status: ''}, lang, city);\r\n        searchAllWeather(setLongWeather, {status: ''}, lang, city);\r\n        resetCity();\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"d-flex\" onSubmit={search}>\r\n                <input \r\n                    className=\"form-control me-2\" \r\n                    value={city} \r\n                    onChange={changeCity}\r\n                    type=\"search\" \r\n                    placeholder=\"Search\" \r\n                    aria-label=\"Search\" \r\n                />\r\n                <button \r\n                    className=\"btn btn-outline-secondary\" \r\n                    type=\"submit\"\r\n                    onChange={changeCity}\r\n                >Search</button>\r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchCity;","import {useState} from 'react';\r\n\r\nexport default () => {\r\n    const [city, setCity] = useState('');\r\n\r\n    return{\r\n        city,\r\n        changeCity: (e) => {\r\n            setCity(e.target.value);\r\n        },\r\n        resetCity: () => {\r\n            setCity('');\r\n        }\r\n    }\r\n}","import React from 'react';\r\n\r\nconst RenderWeather = ({weather}) => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"row p-0 m-0\">\r\n                <div className=\"col-3 p-0\"></div>\r\n                <div className=\"col-6 text-center p-0\">\r\n                    <h1 className=\"text-white display-1\">\r\n                        {weather.temp}°C\r\n                    </h1>\r\n                    <p className=\"text-white display-10 \">\r\n                        {weather.description}    \r\n                    </p>\r\n                </div>\r\n                <div className=\"col-3 p-0\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RenderWeather;","import React from 'react';\r\n\r\nconst Location = ({country, city}) => {\r\n    return(\r\n        <div className=\"mt-5\">\r\n            <h1 className=\"flex display-8 text-center text-white\">\r\n                {city}, {country}\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Location;","import React, {useEffect, useState} from 'react';\r\n\r\nconst DateTime = ({lang}) => {\r\n    const date = new Date();\r\n\r\n    const enDay = ['sanday', 'monday', 'tuesday', 'wednesday', 'thrusday', 'friday', 'saturday'];\r\n    const ruDay = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r\n\r\n    const startTime = {\r\n        hours: date.getHours(),\r\n        min: date.getMinutes(),\r\n        sec: date.getSeconds()\r\n    }\r\n\r\n    const [time, setTime] = useState(startTime);\r\n  \r\n    let day = '';\r\n    \r\n    if(lang === 'en'){\r\n        day += enDay[date.getDay()];\r\n    }else{\r\n        day += ruDay[date.getDay()];\r\n    }\r\n\r\n    const editTime = (num) => {\r\n        if(num < 10){\r\n            num = '0' + String(num);\r\n        }\r\n        return num;\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(()=>{\r\n            setTime({\r\n                hours: editTime(date.getHours()),\r\n                min: editTime(date.getMinutes()),\r\n                sec: editTime(date.getSeconds()),\r\n            });\r\n        }, 200); \r\n    }, [time]);\r\n\r\n\r\n    return(\r\n        <div className=\"text-center\">\r\n            <h6 className=\"text-white display-10\">\r\n              {day + ',    '+ date.toLocaleDateString() + ',    ' + time.hours + ':' + time.min + ':' + time.sec}\r\n            </h6>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DateTime;","import React from 'react';\r\n\r\nconst WeatherCart = ({weather, nameDay}) => {\r\n    return(\r\n        <div className=\"card col-1\">\r\n            <img className=\"card-img-top\" alt=\"\"/>\r\n            <div className=\"card-body\">\r\n                <p className=\"card-title text-center\"> {nameDay} </p>\r\n                <p className=\"card-title text-center\"> {Math.floor(weather.min)} </p>\r\n                <p className=\"card-title text-center\"> {Math.ceil(weather.max)} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherCart;","import React from 'react';\r\nimport WeatherCart from './WeatherCart';\r\n\r\nconst AllWeather = ({allWeather, lang}) => {\r\n    console.log(allWeather);\r\n    const numDay = new Date().getDay();\r\n    const enName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    const ruName = ['Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб', 'Вс', 'Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб'];\r\n    let nameDay = [];\r\n\r\n    if(lang === 'ru'){\r\n        nameDay = ruName;\r\n    }else{\r\n        nameDay = enName;\r\n    }\r\n\r\n    return(\r\n        <>  \r\n            <div className=\"row m-0 p-0\">\r\n                <div className=\"col-3\"></div>\r\n                <WeatherCart weather={allWeather[0]} nameDay={nameDay[numDay + 0]}/>\r\n                <WeatherCart weather={allWeather[1]} nameDay={nameDay[numDay + 1]}/>\r\n                <WeatherCart weather={allWeather[2]} nameDay={nameDay[numDay + 2]}/>\r\n                <WeatherCart weather={allWeather[3]} nameDay={nameDay[numDay + 3]}/>\r\n                <WeatherCart weather={allWeather[4]} nameDay={nameDay[numDay + 4]}/>\r\n                <WeatherCart weather={allWeather[5]} nameDay={nameDay[numDay + 5]}/>\r\n                <div className=\"col-3\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AllWeather;","import React, { useState } from 'react';\r\nimport SearchCity from './SearchCity';\r\nimport RenderWeather from './RenderWeather';\r\nimport Location from './Location';\r\nimport DateTime from './DateTime';\r\nimport AllWeather from './AllWeather';\r\nimport useTodayWeather from '../hooks/useTodayWeather';\r\nimport useAllWeather from '../hooks/useAllWeather';\r\n\r\nconst App = () => {\r\n    const [lang, setLang] = useState('en');\r\n    const [weather, setWeather] = useState({});\r\n    const {searchTodayWeather} = useTodayWeather();\r\n    const {searchAllWeather} = useAllWeather();\r\n    const [longWeather, setLongWeather] = useState([\r\n        {\r\n            max: '',\r\n            min: ''\r\n        },\r\n        {\r\n            max: '',\r\n            min: ''\r\n        },\r\n        {\r\n            max: '',\r\n            min: ''\r\n        },\r\n        {\r\n            max: '',\r\n            min: ''\r\n        },\r\n        {\r\n            max: '',\r\n            min: ''\r\n        },\r\n        {\r\n            max: '',\r\n            min: ''\r\n        },\r\n    ]);\r\n\r\n    if(weather.temp === undefined){\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(showPosition);\r\n          } else {\r\n           alert(\"Мы не можем определить Ваше местоположение, введите город в форму\");\r\n        }\r\n    }\r\n\r\n    function showPosition (position) {\r\n        searchTodayWeather(setWeather, position, lang, '');\r\n        searchAllWeather(setLongWeather, position, lang, '');\r\n    }\r\n\r\n    const changeLanguage = () => {\r\n        if(lang === 'en'){\r\n            setLang('ru');\r\n        }else{\r\n            setLang('en');\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <nav className=\"navbar navbar-light\" style={{backgroundColor: \"#e3f2fd\"}}>\r\n                <div className=\"container-fluid\">\r\n                    <div>\r\n                        <a href=\"\" className=\"navbar-brand\">Weather</a>\r\n                        <button\r\n                            className=\"btn btn-outline-secondary\"\r\n                            value={lang}\r\n                            onClick={changeLanguage}\r\n                        >\r\n                            {lang}\r\n                        </button>\r\n                    </div>\r\n                    <SearchCity \r\n                        lang={lang} \r\n                        setWeather={setWeather}\r\n                        setLongWeather={setLongWeather}\r\n                    />\r\n                </div>\r\n            </nav>\r\n            <Location country={weather.country} city={weather.city} />\r\n            <DateTime lang={lang} />\r\n            <RenderWeather weather={weather} />\r\n            <AllWeather allWeather={longWeather} lang={lang } />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}